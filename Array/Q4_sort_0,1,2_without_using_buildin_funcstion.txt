ðŸŽ¯ Problem: Sort an Array of 0s, 1s, and 2s
Goal: Given arr[] containing only 0s, 1s, and 2s â€” sort it in-place in ascending order.

âœ… Approach 1: Brute Force (Count Sort / Frequency Count)
Logic:

Count the number of 0s, 1s, and 2s.

Rewrite the array using the counts.

java
Copy
Edit
public static void sortBruteForce(int[] arr) {
    int count0 = 0, count1 = 0, count2 = 0;

    for (int num : arr) {
        if (num == 0) count0++;
        else if (num == 1) count1++;
        else count2++;
    }

    int i = 0;
    while (count0-- > 0) arr[i++] = 0;
    while (count1-- > 0) arr[i++] = 1;
    while (count2-- > 0) arr[i++] = 2;
}
Time: O(n)

Space: O(1)

Very simple and effective.

âœ… Approach 2: Using 3-Pointer / Dutch National Flag Algorithm (Optimal)
Logic:

Use three pointers: low, mid, and high.

Traverse only once and swap in-place.

java
Copy
Edit
public static void sortDutchNationalFlag(int[] arr) {
    int low = 0, mid = 0, high = arr.length - 1;

    while (mid <= high) {
        if (arr[mid] == 0) {
            swap(arr, low++, mid++);
        } else if (arr[mid] == 1) {
            mid++;
        } else {
            swap(arr, mid, high--);
        }
    }
}

private static void swap(int[] arr, int i, int j) {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
Time: O(n)

Space: O(1)

âœ… Most optimal and in-place

âœ… Approach 3: Bubble Sort (For Interview Completion's Sake)
Logic:
Classic bubble sort on a restricted range of values.

java
Copy
Edit
public static void sortUsingBubbleSort(int[] arr) {
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
Time: O(nÂ²)

Space: O(1)

Not recommended, just for completeness.

ðŸ”„ Comparison Table

Method	Time	Space	Notes
Frequency Count	O(n)	O(1)	Simple and fast
Dutch National Flag	O(n)	O(1)	âœ… Best approach (one-pass)
Bubble Sort	O(nÂ²)	O(1)	Avoid unless asked specifically